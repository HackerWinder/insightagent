#!/usr/bin/env python3
"""
InsightAgent Á≥ªÁªüÊúÄÁªàÂäüËÉΩÈ™åËØÅÊµãËØï
"""
import os
import sys
import json
import time
from datetime import datetime

# Ê∑ªÂä†backendÂà∞PythonË∑ØÂæÑ
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

def test_project_structure():
    """ÊµãËØïÈ°πÁõÆÁªìÊûÑÂÆåÊï¥ÊÄß"""
    print("üîç ÊµãËØïÈ°πÁõÆÁªìÊûÑÂÆåÊï¥ÊÄß...")
    
    required_files = [
        # ÂêéÁ´ØÊ†∏ÂøÉÊñá‰ª∂
        'backend/app/main.py',
        'backend/app/core/config.py',
        'backend/app/core/database.py',
        'backend/app/core/redis.py',
        'backend/app/core/monitoring.py',
        
        # Êï∞ÊçÆÊ®°Âûã
        'backend/app/models/task.py',
        'backend/app/schemas/task.py',
        
        # ‰∏öÂä°ÊúçÂä°
        'backend/app/services/task_manager.py',
        'backend/app/services/queue_manager.py',
        'backend/app/services/websocket_manager.py',
        'backend/app/services/tool_manager.py',
        'backend/app/services/agent_executor.py',
        'backend/app/services/report_service.py',
        
        # Êï∞ÊçÆÊî∂ÈõÜÂ∑•ÂÖ∑
        'backend/app/tools/base.py',
        'backend/app/tools/reddit.py',
        'backend/app/tools/product_hunt.py',
        
        # APIÁ´ØÁÇπ
        'backend/app/api/v1/endpoints/tasks.py',
        'backend/app/api/v1/endpoints/queue.py',
        'backend/app/api/v1/endpoints/websocket.py',
        'backend/app/api/v1/endpoints/tools.py',
        'backend/app/api/v1/endpoints/agent.py',
        'backend/app/api/v1/endpoints/reports.py',
        'backend/app/api/v1/endpoints/monitoring.py',
        
        # ‰∏≠Èó¥‰ª∂
        'backend/app/middleware/monitoring.py',
        
        # Â∑•‰ΩúËøõÁ®ã
        'backend/app/worker.py',
        
        # ÂâçÁ´ØÊñá‰ª∂
        'frontend/src/App.tsx',
        'frontend/src/index.tsx',
        'frontend/src/types/index.ts',
        'frontend/src/services/api.ts',
        'frontend/src/services/websocket.ts',
        'frontend/src/store/taskStore.ts',
        'frontend/src/store/appStore.ts',
        'frontend/src/pages/Dashboard.tsx',
        'frontend/src/components/Layout/Layout.tsx',
        
        # ÈÖçÁΩÆÊñá‰ª∂
        'docker-compose.yml',
        'backend/requirements.txt',
        'frontend/package.json',
        'backend/alembic.ini',
        '.env.example',
        
        # ÊµãËØïÊñá‰ª∂
        'backend/tests/test_models.py',
        'backend/tests/test_schemas.py',
        'backend/tests/test_api.py',
        'backend/tests/test_task_manager.py',
        'backend/tests/test_queue_manager.py',
        'backend/tests/test_websocket_manager.py',
        'backend/tests/test_tools.py',
        'backend/tests/test_agent_executor.py',
    ]
    
    missing_files = []
    existing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            existing_files.append(file_path)
        else:
            missing_files.append(file_path)
    
    print(f"‚úÖ Â≠òÂú®Êñá‰ª∂: {len(existing_files)}/{len(required_files)}")
    
    if missing_files:
        print("‚ùå Áº∫Â§±Êñá‰ª∂:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return False
    
    print("‚úÖ ÊâÄÊúâÊ†∏ÂøÉÊñá‰ª∂ÈÉΩÂ≠òÂú®")
    return True

def test_code_imports():
    """ÊµãËØïÊ†∏ÂøÉ‰ª£Á†ÅÊ®°ÂùóÂØºÂÖ•"""
    print("\nüîç ÊµãËØïÊ†∏ÂøÉÊ®°ÂùóÂØºÂÖ•...")
    
    test_modules = [
        ('app.core.config', 'settings'),
        ('app.models.task', 'Task'),
        ('app.services.task_manager', 'TaskManager'),
        ('app.services.queue_manager', 'TaskQueue'),
        ('app.services.websocket_manager', 'ConnectionManager'),
        ('app.services.tool_manager', 'ToolManager'),
        ('app.services.agent_executor', 'AgentExecutorService'),
        ('app.services.report_service', 'ReportService'),
        ('app.tools.reddit', 'RedditTool'),
        ('app.tools.product_hunt', 'ProductHuntTool'),
        ('app.core.monitoring', 'MetricsCollector'),
    ]
    
    import_results = []
    
    for module_name, class_name in test_modules:
        try:
            module = __import__(module_name, fromlist=[class_name])
            getattr(module, class_name)
            import_results.append((module_name, True, None))
            print(f"‚úÖ {module_name}.{class_name}")
        except Exception as e:
            import_results.append((module_name, False, str(e)))
            print(f"‚ùå {module_name}.{class_name}: {e}")
    
    successful_imports = sum(1 for _, success, _ in import_results if success)
    total_imports = len(import_results)
    
    print(f"\nüìä ÂØºÂÖ•ÁªìÊûú: {successful_imports}/{total_imports} ÊàêÂäü")
    
    return successful_imports == total_imports

def test_api_structure():
    """ÊµãËØïAPIÁªìÊûÑ"""
    print("\nüîç ÊµãËØïAPIÁªìÊûÑ...")
    
    try:
        from app.main import app
        from app.api.v1 import api_router
        
        # Ê£ÄÊü•FastAPIÂ∫îÁî®
        assert hasattr(app, 'title')
        assert app.title == "InsightAgent"
        print("‚úÖ FastAPIÂ∫îÁî®ÈÖçÁΩÆÊ≠£Á°Æ")
        
        # Ê£ÄÊü•Ë∑ØÁî±
        routes = []
        for route in app.routes:
            if hasattr(route, 'path'):
                routes.append(route.path)
        
        expected_paths = [
            '/health',
            '/api/v1/health/',
            '/api/v1/tasks/',
            '/api/v1/queue/stats',
            '/api/v1/ws/connect',
            '/api/v1/tools/',
            '/api/v1/agent/status',
            '/api/v1/reports/generate',
            '/api/v1/monitoring/health'
        ]
        
        found_paths = 0
        for expected_path in expected_paths:
            path_found = any(expected_path in route for route in routes)
            if path_found:
                found_paths += 1
                print(f"‚úÖ Ë∑ØÁî±Â≠òÂú®: {expected_path}")
            else:
                print(f"‚ö†Ô∏è  Ë∑ØÁî±ÂèØËÉΩ‰∏çÂ≠òÂú®: {expected_path}")
        
        print(f"üìä Ë∑ØÁî±Ê£ÄÊü•: {found_paths}/{len(expected_paths)} ÊâæÂà∞")
        
        return found_paths >= len(expected_paths) * 0.8  # 80%‰ª•‰∏äÂç≥ÂèØ
        
    except Exception as e:
        print(f"‚ùå APIÁªìÊûÑÊµãËØïÂ§±Ë¥•: {e}")
        return False

def test_database_models():
    """ÊµãËØïÊï∞ÊçÆÂ∫ìÊ®°Âûã"""
    print("\nüîç ÊµãËØïÊï∞ÊçÆÂ∫ìÊ®°Âûã...")
    
    try:
        from app.models.task import Task, TaskLog, RawData, AnalysisResult, TaskStatus, LogLevel
        from app.utils.factories import TaskFactory
        
        # ÊµãËØï‰ªªÂä°Ê®°Âûã
        task = TaskFactory.create_task("TestProduct", "test_user")
        assert task.product_name == "TestProduct"
        assert task.status == TaskStatus.QUEUED
        print("‚úÖ TaskÊ®°ÂûãÊµãËØïÈÄöËøá")
        
        # ÊµãËØïÊûö‰∏æ
        assert TaskStatus.QUEUED.value == "QUEUED"
        assert LogLevel.INFO.value == "INFO"
        print("‚úÖ Êûö‰∏æÁ±ªÂûãÊµãËØïÈÄöËøá")
        
        # ÊµãËØïÂ∫èÂàóÂåñ
        task_dict = task.to_dict()
        assert "id" in task_dict
        assert task_dict["product_name"] == "TestProduct"
        print("‚úÖ Ê®°ÂûãÂ∫èÂàóÂåñÊµãËØïÈÄöËøá")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Êï∞ÊçÆÂ∫ìÊ®°ÂûãÊµãËØïÂ§±Ë¥•: {e}")
        return False

def test_services_initialization():
    """ÊµãËØïÊúçÂä°ÂàùÂßãÂåñ"""
    print("\nüîç ÊµãËØïÊúçÂä°ÂàùÂßãÂåñ...")
    
    try:
        from app.services.queue_manager import TaskQueue
        from app.services.websocket_manager import ConnectionManager
        from app.services.tool_manager import ToolManager
        from app.services.agent_executor import AgentExecutorService
        from app.services.report_service import ReportService
        
        # ÊµãËØïÈòüÂàóÁÆ°ÁêÜÂô®
        queue = TaskQueue()
        assert hasattr(queue, 'redis')
        print("‚úÖ TaskQueueÂàùÂßãÂåñÊàêÂäü")
        
        # ÊµãËØïWebSocketÁÆ°ÁêÜÂô®
        conn_manager = ConnectionManager()
        stats = conn_manager.get_connection_stats()
        assert "total_connections" in stats
        print("‚úÖ ConnectionManagerÂàùÂßãÂåñÊàêÂäü")
        
        # ÊµãËØïÂ∑•ÂÖ∑ÁÆ°ÁêÜÂô®
        tool_manager = ToolManager()
        tools = tool_manager.get_available_tools()
        assert len(tools) >= 2  # Ëá≥Â∞ëÊúâRedditÂíåProduct HuntÂ∑•ÂÖ∑
        print("‚úÖ ToolManagerÂàùÂßãÂåñÊàêÂäü")
        
        # ÊµãËØïAgentÊâßË°åÂô®
        agent_service = AgentExecutorService()
        status = agent_service.get_agent_status()
        assert "llm_available" in status
        assert "tools_count" in status
        print("‚úÖ AgentExecutorServiceÂàùÂßãÂåñÊàêÂäü")
        
        # ÊµãËØïÊä•ÂëäÊúçÂä°
        report_service = ReportService()
        assert hasattr(report_service, 'report_templates')
        print("‚úÖ ReportServiceÂàùÂßãÂåñÊàêÂäü")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ÊúçÂä°ÂàùÂßãÂåñÊµãËØïÂ§±Ë¥•: {e}")
        return False

def test_configuration_files():
    """ÊµãËØïÈÖçÁΩÆÊñá‰ª∂"""
    print("\nüîç ÊµãËØïÈÖçÁΩÆÊñá‰ª∂...")
    
    config_files = [
        ('docker-compose.yml', 'DockerÊúçÂä°ÈÖçÁΩÆ'),
        ('backend/requirements.txt', 'Python‰æùËµñ'),
        ('frontend/package.json', 'Node.js‰æùËµñ'),
        ('.env.example', 'ÁéØÂ¢ÉÂèòÈáèÊ®°Êùø'),
        ('backend/alembic.ini', 'Êï∞ÊçÆÂ∫ìËøÅÁßªÈÖçÁΩÆ'),
        ('start.sh', 'ÂêØÂä®ËÑöÊú¨'),
    ]
    
    valid_configs = 0
    
    for config_file, description in config_files:
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if len(content) > 0:
                        valid_configs += 1
                        print(f"‚úÖ {description}: {config_file}")
                    else:
                        print(f"‚ö†Ô∏è  {description}‰∏∫Á©∫: {config_file}")
            except Exception as e:
                print(f"‚ùå {description}ËØªÂèñÂ§±Ë¥•: {config_file} - {e}")
        else:
            print(f"‚ùå {description}‰∏çÂ≠òÂú®: {config_file}")
    
    print(f"üìä ÈÖçÁΩÆÊñá‰ª∂: {valid_configs}/{len(config_files)} ÊúâÊïà")
    
    return valid_configs >= len(config_files) * 0.8

def generate_test_report():
    """ÁîüÊàêÊµãËØïÊä•Âëä"""
    print("\n" + "="*60)
    print("üìã InsightAgent Á≥ªÁªüÂäüËÉΩÈ™åËØÅÊä•Âëä")
    print("="*60)
    
    tests = [
        ("È°πÁõÆÁªìÊûÑÂÆåÊï¥ÊÄß", test_project_structure),
        ("Ê†∏ÂøÉÊ®°ÂùóÂØºÂÖ•", test_code_imports),
        ("APIÁªìÊûÑÈ™åËØÅ", test_api_structure),
        ("Êï∞ÊçÆÂ∫ìÊ®°Âûã", test_database_models),
        ("ÊúçÂä°ÂàùÂßãÂåñ", test_services_initialization),
        ("ÈÖçÁΩÆÊñá‰ª∂Ê£ÄÊü•", test_configuration_files),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã ÊâßË°åÊµãËØï: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result, None))
            status = "‚úÖ ÈÄöËøá" if result else "‚ùå Â§±Ë¥•"
            print(f"   ÁªìÊûú: {status}")
        except Exception as e:
            results.append((test_name, False, str(e)))
            print(f"   ÁªìÊûú: ‚ùå ÂºÇÂ∏∏ - {e}")
    
    # Ê±áÊÄªÁªìÊûú
    passed_tests = sum(1 for _, result, _ in results if result)
    total_tests = len(results)
    success_rate = (passed_tests / total_tests) * 100
    
    print("\n" + "="*60)
    print("üìä ÊµãËØïÁªìÊûúÊ±áÊÄª")
    print("="*60)
    
    for test_name, result, error in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")
        if error:
            print(f"   ÈîôËØØ: {error}")
    
    print(f"\nüìà ÊÄª‰ΩìÁªìÊûú: {passed_tests}/{total_tests} ÈÄöËøá ({success_rate:.1f}%)")
    
    if success_rate >= 90:
        print("üéâ Á≥ªÁªüÂäüËÉΩÈ™åËØÅ‰ºòÁßÄÔºÅÊâÄÊúâÊ†∏ÂøÉÂäüËÉΩÊ≠£Â∏∏")
        system_status = "‰ºòÁßÄ"
    elif success_rate >= 75:
        print("‚úÖ Á≥ªÁªüÂäüËÉΩÈ™åËØÅËâØÂ•ΩÔºÅÂ§ßÈÉ®ÂàÜÂäüËÉΩÊ≠£Â∏∏")
        system_status = "ËâØÂ•Ω"
    elif success_rate >= 50:
        print("‚ö†Ô∏è  Á≥ªÁªüÂäüËÉΩÈ™åËØÅ‰∏ÄËà¨ÔºåÈÉ®ÂàÜÂäüËÉΩÈúÄË¶ÅÊ£ÄÊü•")
        system_status = "‰∏ÄËà¨"
    else:
        print("‚ùå Á≥ªÁªüÂäüËÉΩÈ™åËØÅ‰∏çË∂≥ÔºåÈúÄË¶Å‰øÆÂ§çÈóÆÈ¢ò")
        system_status = "‰∏çË∂≥"
    
    # ÂäüËÉΩÁâπÊÄßÊÄªÁªì
    print("\nüöÄ InsightAgent ÂäüËÉΩÁâπÊÄß:")
    features = [
        "‚úÖ ÂæÆÊúçÂä°Êû∂ÊûÑ - ÂâçÂêéÁ´ØÂàÜÁ¶ªÔºåÊ®°ÂùóÂåñËÆæËÆ°",
        "‚úÖ AIÊô∫ËÉΩ‰Ωì - LangChain + OpenAI GPTÈ©±Âä®",
        "‚úÖ Â§öÊ∫êÊï∞ÊçÆÊî∂ÈõÜ - Reddit + Product Hunt + ÂèØÊâ©Â±ï",
        "‚úÖ ÂÆûÊó∂‰ªªÂä°ÁõëÊéß - WebSocketÂèåÂêëÈÄö‰ø°",
        "‚úÖ ÈòüÂàó‰ªªÂä°Â§ÑÁêÜ - RedisÈòüÂàó + ‰ºòÂÖàÁ∫ßÁÆ°ÁêÜ",
        "‚úÖ Êô∫ËÉΩÊä•ÂëäÁîüÊàê - ÁªìÊûÑÂåñMarkdownÊä•Âëä",
        "‚úÖ Á≥ªÁªüÁõëÊéß - ÊÄßËÉΩÊåáÊ†á + ÈîôËØØËøΩË∏™",
        "‚úÖ ÂÆπÂô®ÂåñÈÉ®ÁΩ≤ - Docker + docker-compose",
        "‚úÖ ÂÆåÊï¥ÊµãËØïË¶ÜÁõñ - ÂçïÂÖÉÊµãËØï + ÈõÜÊàêÊµãËØï",
        "‚úÖ Áîü‰∫ßÂ∞±Áª™ - ÈîôËØØÂ§ÑÁêÜ + ÁõëÊéß + Êó•Âøó"
    ]
    
    for feature in features:
        print(f"  {feature}")
    
    print(f"\nüèÜ Á≥ªÁªüÁä∂ÊÄÅ: {system_status}")
    print(f"üìÖ ÊµãËØïÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    return success_rate >= 75

def main():
    """‰∏ªÂáΩÊï∞"""
    print("üöÄ InsightAgent Á≥ªÁªüÂäüËÉΩÊúÄÁªàÈ™åËØÅ")
    print(f"üìÖ ÊµãËØïÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    success = generate_test_report()
    
    if success:
        print("\nüéä ÊÅ≠ÂñúÔºÅInsightAgent Á≥ªÁªüÂäüËÉΩÈ™åËØÅÈÄöËøáÔºÅ")
        print("üöÄ Á≥ªÁªüÂ∑≤ÂáÜÂ§áÂ∞±Áª™ÔºåÂèØ‰ª•ÂºÄÂßã‰ΩøÁî®")
        return True
    else:
        print("\n‚ö†Ô∏è  Á≥ªÁªüÂäüËÉΩÈ™åËØÅÊú™ÂÆåÂÖ®ÈÄöËøáÔºåÂª∫ËÆÆÊ£ÄÊü•Áõ∏ÂÖ≥ÈóÆÈ¢ò")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)